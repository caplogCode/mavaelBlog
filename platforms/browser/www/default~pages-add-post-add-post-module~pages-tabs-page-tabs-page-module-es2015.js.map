{"version":3,"sources":["./node_modules/@ionic-native/photo-library/ngx/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AAC8B;AAC9B;AACS;AAC3C;AACA;AACA;AACA;AACA;AACO;AACP,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA,2BAA2B,+CAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,4EAA4E,QAAQ,kEAAO,sBAAsB,qBAAqB,aAAa;AACnJ,sEAAsE,QAAQ,kEAAO,gCAAgC,6BAA6B,aAAa;AAC/J,oDAAoD,QAAQ,kEAAO,qBAAqB,6BAA6B,aAAa;AAClI,wEAAwE,QAAQ,kEAAO,2BAA2B,qCAAqC,aAAa;AACpK,oEAAoE,QAAQ,kEAAO,uBAAuB,qCAAqC,aAAa;AAC5J,qEAAqE,QAAQ,kEAAO,wBAAwB,qCAAqC,aAAa;AAC9J,iEAAiE,QAAQ,kEAAO,oBAAoB,qCAAqC,aAAa;AACtJ,uEAAuE,QAAQ,kEAAO,qBAAqB,qCAAqC,aAAa;AAC7J,8DAA8D,QAAQ,kEAAO,qBAAqB,qCAAqC,aAAa;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC,CAAC,oEAAiB;AACK;AACxB,2CAA2C,muc","file":"default~pages-add-post-add-post-module~pages-tabs-page-tabs-page-module-es2015.js","sourcesContent":["import { __extends } from \"tslib\";\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\n/**\n * @hidden\n *\n * Wraps method that returns an observable that can be completed. Provided opts.resultFinalPredicate dictates when the observable completes.\n */\nexport function CordovaFiniteObservable(opts) {\n    if (opts === void 0) { opts = {}; }\n    opts.observable = true;\n    return function (target, methodName, descriptor) {\n        return {\n            value: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var wrappedObservable = wrap(this, methodName, opts).apply(this, args);\n                return new Observable(function (observer) {\n                    var wrappedSubscription = wrappedObservable.subscribe({\n                        next: function (x) {\n                            observer.next(opts.resultTransform ? x[opts.resultTransform] : x);\n                            if (opts.resultFinalPredicate && x[opts.resultFinalPredicate]) {\n                                observer.complete();\n                            }\n                        },\n                        error: function (err) {\n                            observer.error(err);\n                        },\n                        complete: function () {\n                            observer.complete();\n                        },\n                    });\n                    return function () {\n                        wrappedSubscription.unsubscribe();\n                    };\n                });\n            },\n            enumerable: true,\n        };\n    };\n}\nvar PhotoLibrary = /** @class */ (function (_super) {\n    __extends(PhotoLibrary, _super);\n    function PhotoLibrary() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PhotoLibrary.prototype.getLibrary = function (success, error, options) { return cordova(this, \"getLibrary\", { \"observable\": true }, arguments); };\n    PhotoLibrary.prototype.requestAuthorization = function (options) { return cordova(this, \"requestAuthorization\", { \"callbackOrder\": \"reverse\" }, arguments); };\n    PhotoLibrary.prototype.getAlbums = function () { return cordova(this, \"getAlbums\", { \"callbackOrder\": \"reverse\" }, arguments); };\n    PhotoLibrary.prototype.getThumbnailURL = function (photo, options) { return cordova(this, \"getThumbnailURL\", { \"successIndex\": 1, \"errorIndex\": 2 }, arguments); };\n    PhotoLibrary.prototype.getPhotoURL = function (photo, options) { return cordova(this, \"getPhotoURL\", { \"successIndex\": 1, \"errorIndex\": 2 }, arguments); };\n    PhotoLibrary.prototype.getThumbnail = function (photo, options) { return cordova(this, \"getThumbnail\", { \"successIndex\": 1, \"errorIndex\": 2 }, arguments); };\n    PhotoLibrary.prototype.getPhoto = function (photo, options) { return cordova(this, \"getPhoto\", { \"successIndex\": 1, \"errorIndex\": 2 }, arguments); };\n    PhotoLibrary.prototype.saveImage = function (url, album, options) { return cordova(this, \"saveImage\", { \"successIndex\": 2, \"errorIndex\": 3 }, arguments); };\n    PhotoLibrary.prototype.saveVideo = function (url, album) { return cordova(this, \"saveVideo\", { \"successIndex\": 2, \"errorIndex\": 3 }, arguments); };\n    PhotoLibrary.pluginName = \"PhotoLibrary\";\n    PhotoLibrary.plugin = \"cordova-plugin-photo-library\";\n    PhotoLibrary.pluginRef = \"cordova.plugins.photoLibrary\";\n    PhotoLibrary.repo = \"https://github.com/terikon/cordova-plugin-photo-library\";\n    PhotoLibrary.install = \"ionic cordova plugin add cordova-plugin-photo-library --variable PHOTO_LIBRARY_USAGE_DESCRIPTION=\\\"To choose photos\\\"\";\n    PhotoLibrary.installVariables = [\"PHOTO_LIBRARY_USAGE_DESCRIPTION\"];\n    PhotoLibrary.platforms = [\"Android\", \"Browser\", \"iOS\"];\n    PhotoLibrary.decorators = [\n        { type: Injectable }\n    ];\n    return PhotoLibrary;\n}(IonicNativePlugin));\nexport { PhotoLibrary };\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"webpack:///"}