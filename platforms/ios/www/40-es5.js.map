{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, h, e as getElement, H as Host } from './index-e23c3ffd.js';\nimport { b as getIonMode, c as config } from './ionic-global-fbc9a2ac.js';\nimport { b as assert } from './helpers-5c745fbd.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-b60886e1.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n    constructor(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    async init(container) {\n        this.state = VIEW_STATE_ATTACHED;\n        if (!this.element) {\n            const component = this.component;\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _destroy() {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        const element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    }\n}\nconst matches = (view, id, params) => {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    const currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    const keysA = Object.keys(currentParams);\n    const keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (const key of keysA) {\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst convertToView = (page, params) => {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n    return pages.map(page => {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('page' in page) {\n            return convertToView(page.page, page.params);\n        }\n        return convertToView(page, undefined);\n    }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-7b4b8b66.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps) => {\n    const nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true });\n        }\n    }\n    return Promise.resolve(false);\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"],"sourceRoot":"webpack:///","file":"40-es5.js"}