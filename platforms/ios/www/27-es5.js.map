{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-md.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, w as writeTask, f as readTask, h, e as getElement, H as Host } from './index-e23c3ffd.js';\nimport { b as getIonMode, c as config } from './ionic-global-fbc9a2ac.js';\nimport { s as sanitizeDOMString } from './index-79d74e0b.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nconst InfiniteScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n            const distanceFromInfinite = (this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                this.didFire = false;\n            }\n            return 4;\n        };\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            writeTask(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                readTask(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        writeTask(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                        });\n                    });\n                });\n            });\n        }\n    }\n    canStart() {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const disabled = this.disabled;\n        return (h(Host, { class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nInfiniteScroll.style = infiniteScrollCss;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst InfiniteScrollContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true\n            } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    }\n};\nInfiniteScrollContent.style = {\n    /*STENCIL:MODE:ios*/ ios: infiniteScrollContentIosCss,\n    /*STENCIL:MODE:md*/ md: infiniteScrollContentMdCss\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"],"sourceRoot":"webpack:///","file":"27-es5.js"}